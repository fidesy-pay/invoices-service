// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: api/crypto-facade/crypto-facade.proto

package crypto_facade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CryptoFacade_AcceptCrypto_FullMethodName = "/crypto_facade.CryptoFacade/AcceptCrypto"
)

// CryptoFacadeClient is the client API for CryptoFacade service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoFacadeClient interface {
	AcceptCrypto(ctx context.Context, in *AcceptCryptoRequest, opts ...grpc.CallOption) (*AcceptCryptoResponse, error)
}

type cryptoFacadeClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoFacadeClient(cc grpc.ClientConnInterface) CryptoFacadeClient {
	return &cryptoFacadeClient{cc}
}

func (c *cryptoFacadeClient) AcceptCrypto(ctx context.Context, in *AcceptCryptoRequest, opts ...grpc.CallOption) (*AcceptCryptoResponse, error) {
	out := new(AcceptCryptoResponse)
	err := c.cc.Invoke(ctx, CryptoFacade_AcceptCrypto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoFacadeServer is the server API for CryptoFacade service.
// All implementations must embed UnimplementedCryptoFacadeServer
// for forward compatibility
type CryptoFacadeServer interface {
	AcceptCrypto(context.Context, *AcceptCryptoRequest) (*AcceptCryptoResponse, error)
	mustEmbedUnimplementedCryptoFacadeServer()
}

// UnimplementedCryptoFacadeServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoFacadeServer struct {
}

func (UnimplementedCryptoFacadeServer) AcceptCrypto(context.Context, *AcceptCryptoRequest) (*AcceptCryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptCrypto not implemented")
}
func (UnimplementedCryptoFacadeServer) mustEmbedUnimplementedCryptoFacadeServer() {}

// UnsafeCryptoFacadeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoFacadeServer will
// result in compilation errors.
type UnsafeCryptoFacadeServer interface {
	mustEmbedUnimplementedCryptoFacadeServer()
}

func RegisterCryptoFacadeServer(s grpc.ServiceRegistrar, srv CryptoFacadeServer) {
	s.RegisterService(&CryptoFacade_ServiceDesc, srv)
}

func _CryptoFacade_AcceptCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptCryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoFacadeServer).AcceptCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoFacade_AcceptCrypto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoFacadeServer).AcceptCrypto(ctx, req.(*AcceptCryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoFacade_ServiceDesc is the grpc.ServiceDesc for CryptoFacade service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoFacade_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypto_facade.CryptoFacade",
	HandlerType: (*CryptoFacadeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptCrypto",
			Handler:    _CryptoFacade_AcceptCrypto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/crypto-facade/crypto-facade.proto",
}
