// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: api/coingecko-api/coingecko-api.proto

package coingecko_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoinGeckoAPI_GetPrice_FullMethodName = "/coingecko_api.CoinGeckoAPI/GetPrice"
)

// CoinGeckoAPIClient is the client API for CoinGeckoAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinGeckoAPIClient interface {
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
}

type coinGeckoAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinGeckoAPIClient(cc grpc.ClientConnInterface) CoinGeckoAPIClient {
	return &coinGeckoAPIClient{cc}
}

func (c *coinGeckoAPIClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, CoinGeckoAPI_GetPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinGeckoAPIServer is the server API for CoinGeckoAPI service.
// All implementations must embed UnimplementedCoinGeckoAPIServer
// for forward compatibility
type CoinGeckoAPIServer interface {
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	mustEmbedUnimplementedCoinGeckoAPIServer()
}

// UnimplementedCoinGeckoAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCoinGeckoAPIServer struct {
}

func (UnimplementedCoinGeckoAPIServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedCoinGeckoAPIServer) mustEmbedUnimplementedCoinGeckoAPIServer() {}

// UnsafeCoinGeckoAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinGeckoAPIServer will
// result in compilation errors.
type UnsafeCoinGeckoAPIServer interface {
	mustEmbedUnimplementedCoinGeckoAPIServer()
}

func RegisterCoinGeckoAPIServer(s grpc.ServiceRegistrar, srv CoinGeckoAPIServer) {
	s.RegisterService(&CoinGeckoAPI_ServiceDesc, srv)
}

func _CoinGeckoAPI_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinGeckoAPIServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinGeckoAPI_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinGeckoAPIServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinGeckoAPI_ServiceDesc is the grpc.ServiceDesc for CoinGeckoAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinGeckoAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coingecko_api.CoinGeckoAPI",
	HandlerType: (*CoinGeckoAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _CoinGeckoAPI_GetPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/coingecko-api/coingecko-api.proto",
}
