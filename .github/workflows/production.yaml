name: CI/CD Pipeline

on:
  push:
    branches:
      - 'master'

jobs:
  prepare:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get app name
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          REPO_NAME=${{ github.event.repository.name }}
          
          # Check if the branch name is "master"
          if [ $BRANCH_NAME = "master" ]; then
            APP_NAME=$REPO_NAME
          else
            APP_NAME="${REPO_NAME}_${BRANCH_NAME}"
          fi
          
          APP_NAME_STAGE="${APP_NAME}-stage"
          
          echo "APP_NAME=$APP_NAME" >> vars.env
          echo "APP_NAME_STAGE=$APP_NAME_STAGE" >> vars.env
          
          echo $APP_NAME
          echo $APP_NAME_STAGE

      - name: Generate swagger
        run: |
          ls
#          PROXY_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
#          SWAGGER_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
#
#          echo "PROXY_PORT=$PROXY_PORT" >> vars.env
#          echo "SWAGGER_PORT=$SWAGGER_PORT" >> vars.env
#
#          # clone swaggerui
#          git clone https://github.com/fidesyx/platform
#          cp -r platform/swaggerui .
#
#          make generate-swagger SERVER_HOST=${{ vars.SERVER_HOST }} PROXY_PORT=$PROXY_PORT PROJECT_NAME=${{ github.event.repository.name }}

  clean:
    runs-on: self-hosted
    needs: prepare
    steps:
      - name: Remove production container and image
        run: |
          source vars.env
          
          if docker inspect $APP_NAME > /dev/null 2>&1; then docker rm -f $APP_NAME && docker rmi -f $APP_NAME; else echo "Container not found."; fi

      - name: Remove staging latest container and image
        run: |
          source vars.env
          
          if docker inspect $APP_NAME_STAGE > /dev/null 2>&1; then docker rm -f $APP_NAME_STAGE && docker rmi -f $APP_NAME_STAGE; else echo "Container not found."; fi

  build:
    runs-on: self-hosted
    needs: clean
    steps:
      - name: Build binary
        run: |
          GOARCH=amd64 GOOS=linux go build -o ./bin/main ./cmd/${{ github.event.repository.name }}

  staging-latest:
    name: Staging latest
    runs-on: self-hosted
    needs: build
    steps:
      - name: Staging latest
        run: |
          source vars.env
          
          # generate random ports          
          GRPC_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
          METRICS_PORT=40401
          
          docker build --tag $APP_NAME_STAGE .
          
          docker run --name $APP_NAME_STAGE -d \
             --restart always \
             --network zoo \
             -e APP_NAME=$APP_NAME_STAGE \
             -e ENV=STAGING \
             -e GRPC_PORT=$GRPC_PORT -p $GRPC_PORT:$GRPC_PORT \
             -e METRICS_PORT=$METRICS_PORT -p $METRICS_PORT:$METRICS_PORT \
              $APP_NAME_STAGE

  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: build
    steps:
      - name: Build and run docker container
        run: |
          source vars.env
          
          # generate random ports          
          GRPC_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
          METRICS_PORT=40400
          
          docker build --tag $APP_NAME .
          
          docker run --name $APP_NAME -d \
             --restart always \
             --network zoo \
             -e APP_NAME=$APP_NAME \
             -e ENV=PRODUCTION \
             -e GRPC_PORT=$GRPC_PORT \
             -e METRICS_PORT=$METRICS_PORT \
              $APP_NAME