name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'
      - '!master'

jobs:
  prepare:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get app name
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          REPO_NAME=${{ github.event.repository.name }}
          
          # Check if the branch name is "master"
          if [ $BRANCH_NAME = "master" ]; then
            APP_NAME=$REPO_NAME
          else
            APP_NAME="${REPO_NAME}_${BRANCH_NAME}"
          fi
          
          echo "APP_NAME=$APP_NAME" >> vars.env
          echo $APP_NAME

      - name: Generate random number
        run: |
            GRPC_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
            METRICS_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
            PROXY_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
            SWAGGER_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
            
            echo "GRPC_PORT=$GRPC_PORT" >> vars.env
            echo "METRICS_PORT=$METRICS_PORT" >> vars.env
            echo "PROXY_PORT=$PROXY_PORT" >> vars.env
            echo "SWAGGER_PORT=$SWAGGER_PORT" >> vars.env
            echo "PROJECT_NAME=${{ github.event.repository.name }}" >> vars.env

  clean:
    runs-on: self-hosted
    needs: prepare
    steps:
      - name: Remove container and image
        run: |
          source vars.env
          
          if docker inspect $APP_NAME > /dev/null 2>&1; then docker rm -f $APP_NAME && docker rmi -f $APP_NAME; else echo "Container not found."; fi

  build:
    runs-on: self-hosted
    needs: clean
    steps:
      - name: Build binary
        run: |
          GOARCH=amd64 GOOS=linux go build -o ./bin/main ./cmd/${{ github.event.repository.name }}

  run-deps:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Docker compose
        run: docker compose up -d

  deploy:
    runs-on: self-hosted
    needs: run-deps
    steps:
      - name: Build and run docker container
        run: |
          source vars.env
          
          docker build --tag $APP_NAME .
           docker run --name $APP_NAME -d \
            --restart always \
            --network zoo \
            -e APP_NAME=$APP_NAME \
            -e ENV=STAGING \
            -e GRPC_PORT=$GRPC_PORT -p $GRPC_PORT:$GRPC_PORT \
            -e METRICS_PORT=$METRICS_PORT -p $METRICS_PORT:$METRICS_PORT \
            -e PROXY_PORT=$PROXY_PORT -p $PROXY_PORT:$PROXY_PORT \
            -e SWAGGER_PORT=$SWAGGER_PORT -p $SWAGGER_PORT:$SWAGGER_PORT \
             $APP_NAME