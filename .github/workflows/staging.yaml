name: CI/CD Pipeline

on:
  push:
    branches:
      - "*"
      - "!master"

jobs:
  prepare:
    name: Prepare
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get app name
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          REPO_NAME=${{ github.event.repository.name }}

          # Check if the branch name is "master"
          if [ $BRANCH_NAME = "master" ]; then
            APP_NAME=$REPO_NAME
          else
            APP_NAME="${REPO_NAME}-stage"
          fi

          echo "APP_NAME=$APP_NAME" >> vars.env
          echo $APP_NAME

      - name: Generate swagger
        run: |
          ls
      #          PROXY_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
      #          SWAGGER_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
      #
      #          echo "PROXY_PORT=$PROXY_PORT" >> vars.env
      #          echo "SWAGGER_PORT=$SWAGGER_PORT" >> vars.env
      #
      #          # clone swaggerui
      #          git clone https://github.com/fidesyx/platform
      #          cp -r platform/swaggerui .
      #
      #          make generate-swagger SERVER_HOST=${{ vars.SERVER_HOST }} PROXY_PORT=$PROXY_PORT PROJECT_NAME=${{ github.event.repository.name }}

      - name: Install dependencies
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.1

  tests:
    name: Unit tests
    runs-on: self-hosted
    needs: prepare
    steps:
      - name: Run Unit tests
        run: go test -v ./...

  clean:
    name: Clean
    runs-on: self-hosted
    needs: tests
    steps:
      - name: Remove container and image
        run: |
          source vars.env

          if docker inspect $APP_NAME > /dev/null 2>&1; then docker rm -f $APP_NAME && docker rmi -f $APP_NAME; else echo "Container not found."; fi

  build:
    name: Build
    runs-on: self-hosted
    needs: clean
    steps:
      - name: Build binary
        run: |
          GOARCH=amd64 GOOS=linux go build -o ./bin/main ./cmd/${{ github.event.repository.name }}

  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: build
    steps:
      - name: Build and run docker container
        run: |
          source vars.env

          # generate random ports
          GRPC_PORT=$((RANDOM % (65000 - 5000 + 1) + 5000))
          METRICS_PORT=40401

          docker build --tag $APP_NAME .

          docker run --name $APP_NAME -d \
            --restart always \
            --network zoo \
            -e APP_NAME=$APP_NAME \
            -e ENV=STAGING \
            -e GRPC_PORT=$GRPC_PORT -p $GRPC_PORT:$GRPC_PORT \
            -e METRICS_PORT=$METRICS_PORT -p $METRICS_PORT:$METRICS_PORT \
             $APP_NAME

          echo http://${{ vars.SERVER_HOST }}:$SWAGGER_PORT/docs

  e2e-tests:
    runs-on: self-hosted
    name: E2E tests
    needs: deploy
    steps:
      - name: Get and run tests
        run: |
          rm -rf e2e-tests
          git clone git@github.com:fidesy-pay/e2e-tests.git
          cd e2e-tests
          go clean -testcache
          go test -v ./internal/tests/...
